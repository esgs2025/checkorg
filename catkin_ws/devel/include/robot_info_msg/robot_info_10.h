// Generated by gencpp from file robot_info_msg/robot_info_10.msg
// DO NOT EDIT!


#ifndef ROBOT_INFO_MSG_MESSAGE_ROBOT_INFO_10_H
#define ROBOT_INFO_MSG_MESSAGE_ROBOT_INFO_10_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_info_msg
{
template <class ContainerAllocator>
struct robot_info_10_
{
  typedef robot_info_10_<ContainerAllocator> Type;

  robot_info_10_()
    : data_01()
    , data_02()
    , data_03()
    , data_04()
    , data_05()
    , data_06()
    , data_07()
    , data_08()
    , data_09()
    , data_10()  {
    }
  robot_info_10_(const ContainerAllocator& _alloc)
    : data_01(_alloc)
    , data_02(_alloc)
    , data_03(_alloc)
    , data_04(_alloc)
    , data_05(_alloc)
    , data_06(_alloc)
    , data_07(_alloc)
    , data_08(_alloc)
    , data_09(_alloc)
    , data_10(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_01_type;
  _data_01_type data_01;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_02_type;
  _data_02_type data_02;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_03_type;
  _data_03_type data_03;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_04_type;
  _data_04_type data_04;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_05_type;
  _data_05_type data_05;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_06_type;
  _data_06_type data_06;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_07_type;
  _data_07_type data_07;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_08_type;
  _data_08_type data_08;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_09_type;
  _data_09_type data_09;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_10_type;
  _data_10_type data_10;





  typedef boost::shared_ptr< ::robot_info_msg::robot_info_10_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_info_msg::robot_info_10_<ContainerAllocator> const> ConstPtr;

}; // struct robot_info_10_

typedef ::robot_info_msg::robot_info_10_<std::allocator<void> > robot_info_10;

typedef boost::shared_ptr< ::robot_info_msg::robot_info_10 > robot_info_10Ptr;
typedef boost::shared_ptr< ::robot_info_msg::robot_info_10 const> robot_info_10ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_info_msg::robot_info_10_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_info_msg::robot_info_10_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_info_msg::robot_info_10_<ContainerAllocator1> & lhs, const ::robot_info_msg::robot_info_10_<ContainerAllocator2> & rhs)
{
  return lhs.data_01 == rhs.data_01 &&
    lhs.data_02 == rhs.data_02 &&
    lhs.data_03 == rhs.data_03 &&
    lhs.data_04 == rhs.data_04 &&
    lhs.data_05 == rhs.data_05 &&
    lhs.data_06 == rhs.data_06 &&
    lhs.data_07 == rhs.data_07 &&
    lhs.data_08 == rhs.data_08 &&
    lhs.data_09 == rhs.data_09 &&
    lhs.data_10 == rhs.data_10;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_info_msg::robot_info_10_<ContainerAllocator1> & lhs, const ::robot_info_msg::robot_info_10_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_info_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_info_msg::robot_info_10_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_info_msg::robot_info_10_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_info_msg::robot_info_10_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94d05248d29ae864a67d9132e60ad190";
  }

  static const char* value(const ::robot_info_msg::robot_info_10_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94d05248d29ae864ULL;
  static const uint64_t static_value2 = 0xa67d9132e60ad190ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_info_msg/robot_info_10";
  }

  static const char* value(const ::robot_info_msg::robot_info_10_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string data_01\n"
"string data_02\n"
"string data_03\n"
"string data_04\n"
"string data_05\n"
"string data_06\n"
"string data_07\n"
"string data_08\n"
"string data_09\n"
"string data_10\n"
;
  }

  static const char* value(const ::robot_info_msg::robot_info_10_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data_01);
      stream.next(m.data_02);
      stream.next(m.data_03);
      stream.next(m.data_04);
      stream.next(m.data_05);
      stream.next(m.data_06);
      stream.next(m.data_07);
      stream.next(m.data_08);
      stream.next(m.data_09);
      stream.next(m.data_10);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_info_10_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_info_msg::robot_info_10_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_info_msg::robot_info_10_<ContainerAllocator>& v)
  {
    s << indent << "data_01: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_01);
    s << indent << "data_02: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_02);
    s << indent << "data_03: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_03);
    s << indent << "data_04: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_04);
    s << indent << "data_05: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_05);
    s << indent << "data_06: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_06);
    s << indent << "data_07: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_07);
    s << indent << "data_08: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_08);
    s << indent << "data_09: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_09);
    s << indent << "data_10: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_10);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_INFO_MSG_MESSAGE_ROBOT_INFO_10_H
